"use client"

import type React from "react"

import { useState } from "react"
import { Plus, Edit, Trash2, Copy, Eye } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

const templatesData = [
  {
    id: 1,
    name: "X√°c nh·∫≠n l·ªãch h·∫πn",
    type: "booking-confirmation",
    category: "email",
    subject: "X√°c nh·∫≠n l·ªãch h·∫πn t·∫°i Elysian Spa",
    content: `Xin ch√†o {name},

C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t l·ªãch h·∫πn t·∫°i Elysian Spa. Ch√∫ng t√¥i x√°c nh·∫≠n l·ªãch h·∫πn c·ªßa b·∫°n nh∆∞ sau:

- D·ªãch v·ª•: {service}
- Ng√†y: {date}
- Gi·ªù: {time}
- ƒê·ªãa ƒëi·ªÉm: Elysian Spa

Vui l√≤ng ƒë·∫øn ƒë√∫ng gi·ªù ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët nh·∫•t.

Tr√¢n tr·ªçng,
Elysian Spa Team`,
    usage: 45,
    lastUsed: "2024-12-15",
  },
  {
    id: 2,
    name: "Nh·∫Øc nh·ªü l·ªãch h·∫πn",
    type: "booking-reminder",
    category: "sms",
    subject: "",
    content: `Xin ch√†o {name}! Nh·∫Øc nh·ªü l·ªãch h·∫πn {service} v√†o {time} ng√†y {date} t·∫°i Elysian Spa. Vui l√≤ng ƒë·∫øn ƒë√∫ng gi·ªù. Hotline: 0123456789`,
    usage: 32,
    lastUsed: "2024-12-16",
  },
  {
    id: 3,
    name: "Khuy·∫øn m√£i ƒë·∫∑c bi·ªát",
    type: "promotion",
    category: "email",
    subject: "üéâ ∆Øu ƒë√£i ƒë·∫∑c bi·ªát d√†nh cho b·∫°n!",
    content: `Xin ch√†o {name},

Elysian Spa d√†nh t·∫∑ng b·∫°n ∆∞u ƒë√£i ƒë·∫∑c bi·ªát:

‚ú® GI·∫¢M 30% cho t·∫•t c·∫£ d·ªãch v·ª• massage
‚ú® T·∫∂NG 1 bu·ªïi chƒÉm s√≥c da mi·ªÖn ph√≠ khi ƒë·∫∑t g√≥i VIP
‚ú® √Åp d·ª•ng t·ª´ nay ƒë·∫øn h·∫øt th√°ng

ƒê·∫∑t l·ªãch ngay: 0123456789
Ho·∫∑c truy c·∫≠p website: elysian-spa.com

S·ªë l∆∞·ª£ng c√≥ h·∫°n!

Tr√¢n tr·ªçng,
Elysian Spa Team`,
    usage: 28,
    lastUsed: "2024-12-14",
  },
  {
    id: 4,
    name: "Ch√∫c m·ª´ng sinh nh·∫≠t",
    type: "birthday",
    category: "email",
    subject: "üéÇ Ch√∫c m·ª´ng sinh nh·∫≠t {name}!",
    content: `Ch√∫c m·ª´ng sinh nh·∫≠t {name}!

Nh√¢n d·ªãp sinh nh·∫≠t c·ªßa b·∫°n, Elysian Spa xin g·ª≠i t·∫∑ng:
üéÅ Voucher gi·∫£m 50% cho d·ªãch v·ª• y√™u th√≠ch
üéÅ 1 bu·ªïi massage th∆∞ gi√£n mi·ªÖn ph√≠
üéÅ Qu√† t·∫∑ng ƒë·∫∑c bi·ªát khi ƒë·∫øn spa

Voucher c√≥ hi·ªáu l·ª±c trong 30 ng√†y.

Ch√∫c b·∫°n tu·ªïi m·ªõi nhi·ªÅu s·ª©c kh·ªèe v√† h·∫°nh ph√∫c!

Tr√¢n tr·ªçng,
Elysian Spa Team`,
    usage: 12,
    lastUsed: "2024-12-10",
  },
]

export function NotificationTemplates() {
  const [templates, setTemplates] = useState(templatesData)
  const [isFormOpen, setIsFormOpen] = useState(false)
  const [editingTemplate, setEditingTemplate] = useState(null)
  const [formData, setFormData] = useState({
    name: "",
    type: "",
    category: "email",
    subject: "",
    content: "",
  })

  const handleAddTemplate = () => {
    setEditingTemplate(null)
    setFormData({ name: "", type: "", category: "email", subject: "", content: "" })
    setIsFormOpen(true)
  }

  const handleEditTemplate = (template: any) => {
    setEditingTemplate(template)
    setFormData({
      name: template.name,
      type: template.type,
      category: template.category,
      subject: template.subject,
      content: template.content,
    })
    setIsFormOpen(true)
  }

  const handleDeleteTemplate = (id: number) => {
    setTemplates(templates.filter((template) => template.id !== id))
  }

  const handleDuplicateTemplate = (template: any) => {
    const newTemplate = {
      ...template,
      id: Math.max(...templates.map((t) => t.id)) + 1,
      name: `${template.name} (Copy)`,
      usage: 0,
      lastUsed: new Date().toISOString().split("T")[0],
    }
    setTemplates([...templates, newTemplate])
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (editingTemplate) {
      setTemplates(
        templates.map((template) => (template.id === editingTemplate ? { ...template, ...formData } : template)),
      )
    } else {
      const newTemplate = {
        ...formData,
        id: Math.max(...templates.map((t) => t.id)) + 1,
        usage: 0,
        lastUsed: new Date().toISOString().split("T")[0],
      }
      setTemplates([...templates, newTemplate])
    }
    setIsFormOpen(false)
  }

  const getCategoryBadge = (category: string) => {
    const categoryColors = {
      email: "bg-admin-primary text-admin-primary-foreground",
      sms: "bg-admin-accent text-admin-accent-foreground",
      push: "bg-admin-secondary text-admin-secondary-foreground",
    }

    const categoryNames = {
      email: "Email",
      sms: "SMS",
      push: "Push",
    }

    return (
      <Badge className={categoryColors[category as keyof typeof categoryColors] || "bg-gray-500 text-white"}>
        {categoryNames[category as keyof typeof categoryNames] || category}
      </Badge>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-admin-foreground">M·∫´u th√¥ng b√°o</h2>
          <p className="text-admin-card-foreground">Qu·∫£n l√Ω c√°c m·∫´u th√¥ng b√°o c√≥ s·∫µn</p>
        </div>
        <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
          <DialogTrigger asChild>
            <Button
              onClick={handleAddTemplate}
              className="bg-admin-primary text-admin-primary-foreground hover:bg-admin-primary/90"
            >
              <Plus className="h-4 w-4 mr-2" />
              T·∫°o m·∫´u m·ªõi
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl bg-admin-card border-admin-border">
            <DialogHeader>
              <DialogTitle className="text-admin-foreground">
                {editingTemplate ? "Ch·ªânh s·ª≠a m·∫´u" : "T·∫°o m·∫´u m·ªõi"}
              </DialogTitle>
            </DialogHeader>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="name" className="text-admin-foreground">
                    T√™n m·∫´u
                  </Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    className="bg-admin-input border-admin-border text-admin-foreground"
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="category" className="text-admin-foreground">
                    Lo·∫°i
                  </Label>
                  <Select
                    value={formData.category}
                    onValueChange={(value) => setFormData({ ...formData, category: value })}
                  >
                    <SelectTrigger className="bg-admin-input border-admin-border text-admin-foreground">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="bg-admin-popover border-admin-border">
                      <SelectItem value="email">Email</SelectItem>
                      <SelectItem value="sms">SMS</SelectItem>
                      <SelectItem value="push">Push</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              {formData.category === "email" && (
                <div>
                  <Label htmlFor="subject" className="text-admin-foreground">
                    Ti√™u ƒë·ªÅ
                  </Label>
                  <Input
                    id="subject"
                    value={formData.subject}
                    onChange={(e) => setFormData({ ...formData, subject: e.target.value })}
                    className="bg-admin-input border-admin-border text-admin-foreground"
                  />
                </div>
              )}
              <div>
                <Label htmlFor="content" className="text-admin-foreground">
                  N·ªôi dung
                </Label>
                <Textarea
                  id="content"
                  value={formData.content}
                  onChange={(e) => setFormData({ ...formData, content: e.target.value })}
                  rows={8}
                  className="bg-admin-input border-admin-border text-admin-foreground"
                  required
                />
              </div>
              <div className="flex justify-end space-x-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setIsFormOpen(false)}
                  className="border-admin-border text-admin-foreground hover:bg-admin-muted bg-transparent"
                >
                  H·ªßy
                </Button>
                <Button
                  type="submit"
                  className="bg-admin-primary text-admin-primary-foreground hover:bg-admin-primary/90"
                >
                  {editingTemplate ? "C·∫≠p nh·∫≠t" : "T·∫°o m·∫´u"}
                </Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {templates.map((template) => (
          <Card key={template.id} className="bg-admin-card border-admin-border">
            <CardHeader>
              <div className="flex items-start justify-between">
                <div>
                  <CardTitle className="text-admin-foreground">{template.name}</CardTitle>
                  <CardDescription className="text-admin-card-foreground">
                    S·ª≠ d·ª•ng {template.usage} l·∫ßn ‚Ä¢ L·∫ßn cu·ªëi: {template.lastUsed}
                  </CardDescription>
                </div>
                {getCategoryBadge(template.category)}
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {template.subject && (
                  <div>
                    <p className="text-sm font-medium text-admin-foreground">Ti√™u ƒë·ªÅ:</p>
                    <p className="text-sm text-admin-muted-foreground line-clamp-1">{template.subject}</p>
                  </div>
                )}
                <div>
                  <p className="text-sm font-medium text-admin-foreground">N·ªôi dung:</p>
                  <p className="text-sm text-admin-muted-foreground line-clamp-3">{template.content}</p>
                </div>
                <div className="flex items-center justify-between pt-2">
                  <div className="flex items-center space-x-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleEditTemplate(template)}
                      className="text-admin-foreground"
                    >
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleDuplicateTemplate(template)}
                      className="text-admin-foreground"
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="sm" className="text-admin-foreground">
                      <Eye className="h-4 w-4" />
                    </Button>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleDeleteTemplate(template.id)}
                    className="text-admin-destructive hover:bg-admin-destructive/10"
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}
